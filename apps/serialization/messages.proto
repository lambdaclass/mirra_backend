syntax = "proto3";

/*
 * Shared structs
 */

/*
 * Direction is a vector with a magnitude of 1
 */
message Direction {
  optional float x = 1;
  optional float y = 2;
}

/*
 * Position of an entity in the arena
 */
message Position {
  optional float x = 1;
  optional float y = 2;
}

message ListPositionPB {
  repeated Position positions = 1;
}

message LobbyEvent {
  oneof event {
    LeaveLobby leave = 1;
    LeftLobby left = 2;
    JoinedLobby joined = 3;
    GameState game = 4;
  }
}

message LeaveLobby { }
message LeftLobby { }
message JoinedLobby { }

message GameEvent {
  oneof event {
    GameJoined joined = 1;
    GameState update = 2;
    GameFinished finished = 3;
    ToggleBots toggle_bots = 4;
    BountySelected bounty_selected = 5;
  }
}

message BountySelected {
  BountyInfo bounty = 1;
}

message GameFinished {
  map<uint64, Entity> winners = 1;
  map<uint64, Entity> players = 2;
}

message GameJoined {
  uint64 player_id = 1;
  Configuration config = 2;
  repeated BountyInfo bounties = 3;
  uint32 team = 4;
  string map = 5;
}

message Configuration {
  ConfigGame game = 1;
  ConfigMap map = 2;
  repeated ConfigCharacter characters = 3;
  ClientConfig client_config = 4;
}

enum GameMode{
  BATTLE = 0;
  DEATHMATCH = 1;
  DUO = 2;
  QUICK_GAME = 3;
  TRIO = 4;
}

message ConfigGame {
  float tick_rate_ms = 1;
  float bounty_pick_time_ms = 2;
  float start_game_time_ms = 3;
  GameMode game_mode = 4;
}

message ConfigMap {
  float radius = 1;
  string name = 2;
}

message ConfigCharacter {
  string name = 1;
  bool active = 2;
  float base_speed = 3;
  float base_size = 4;
  uint64 base_health = 5;
  uint64 max_inventory_size = 6;
  map<string, ConfigSkill> skills = 7;
  uint64 base_mana = 8;
}

message ClientConfig {
  ConfigServerUpdate server_update = 1;
}

message ConfigServerUpdate {
  uint64 timestamp_difference_samples_to_check_warning = 1;
  uint64 timestamp_differences_samples_max_length = 2;
  uint64 show_warning_threshold = 3;
  uint64 stop_warning_threshold = 4;
  uint64 ms_without_update_show_warning = 5;
  uint64 ms_without_update_disconnect = 6;
}

message ConfigSkill {
  string name = 1;
  uint64 cooldown_ms = 2;
  uint64 execution_duration_ms = 3;
  float targetting_radius = 4;
  float targetting_angle = 5;
  float targetting_range = 6;
  uint64 stamina_cost = 7;
  float targetting_offset = 8;
  uint64 mana_cost = 9;
  bool is_combo = 10;
  AttackType attack_type = 11;
  SkillType skill_type = 12;
}

enum AttackType {
  MELEE = 0;
  RANGED = 1;
}

enum SkillType{
  BASIC = 0;
  ULTIMATE = 1;
  DASH = 2;
}


/*
 * Game State
 */
message GameState {
  string game_id = 1;
  map<uint64, Entity> players = 2;
  map<uint64, Entity> projectiles = 3;
  map<uint64, int64> player_timestamps = 4;
  int64 server_timestamp = 5;
  Zone zone = 6;
  repeated KillEntry killfeed = 7;
  map<uint64, uint64> damage_taken = 8;
  map<uint64, uint64> damage_done = 9;
  map<uint64, Entity> power_ups = 10;
  GameStatus status = 11;
  int64 start_game_timestamp = 12;
  map<uint64, Entity> items = 13;
  map<uint64, Entity> obstacles = 14;
  map<uint64, Entity> pools = 15;
  map<uint64, Entity> crates = 16;
  map<uint64, Entity> bushes = 17;
  map<uint64, Entity> traps = 18;
  Entity external_wall = 19;
}

enum GameStatus {
  PREPARING = 0;
  RUNNING = 1;
  ENDED = 2;
  SELECTING_BOUNTY = 3;
}

/*
 * Info about an entity
 * id: unique identifier
 * category: player, projectile, obstacle, item.
 * shape: circle, point, line, polygon, point.
 * name: unique name of the entity
 * position: position of the entity (polyogns and lines don't have a position)
 * radius: radius of the entity (only circles have a radius)
 * vertices: vertices of the entity (only polygons and lines have vertices)
 * collides_with: entities that the entity is colliding with
 * speed: speed of the entity
 * direction: direction of the entity if it is moving
 * is_moving: true if the entity is moving
 */
message Entity {
  optional uint64 id = 1;
  optional string category = 2;
  optional string shape = 3;
  optional string name = 4;
  Position position = 5;
  optional float radius = 6;
  optional ListPositionPB vertices = 7;
  repeated uint64 collides_with = 8;
  optional float speed = 9;
  Direction direction = 10;
  optional bool is_moving = 11;
  oneof aditional_info {
    Player player = 12;
    Projectile projectile = 13;
    Obstacle obstacle = 14;
    PowerUp power_up = 15;
    Item item = 16;
    Pool pool = 17;
    Crate crate = 18;
    Bush bush = 19;
    Trap trap = 20;
  }
}

message Player {
  optional uint64 health = 1;
  optional uint64 kill_count = 2;
  repeated PlayerAction current_actions = 3;
  optional uint64 available_stamina = 4;
  optional uint64 max_stamina = 5;
  optional uint64 stamina_interval = 6;
  optional bool recharging_stamina = 7;
  optional string character_name = 8;
  optional uint64 power_ups = 9;
  repeated Effect effects = 10;
  map<string, uint64> cooldowns = 11;
  repeated uint64 visible_players = 12;
  optional bool on_bush = 13;
  optional bool forced_movement = 14;
  optional bool bounty_completed = 15;
  optional uint64 mana = 16;
  optional uint32 current_basic_animation = 17;
  optional uint32 match_position = 18;
  optional uint32 team = 19;
  optional uint64 max_health = 20;
  map<uint32, Item> inventory = 21;
  optional bool blocked_actions = 22;
  optional string skin_name = 23;
  optional uint64 character_level = 24;
}

message Effect {
  string name = 1;
  uint32 duration_ms = 2;
  uint64 id = 3;
}

message Item {
  optional string name = 2;
  map<uint32, uint32> pick_up_time_elapsed = 3;
  optional float mechanic_radius = 4;
  ItemStatus status = 5;
  optional uint64 owner_id = 6;
}

enum ItemStatus {
  ITEM_STATUS_UNDEFINED = 0;
  ITEM_PICKED_UP = 1;
  ITEM_USED = 2;
  ITEM_ACTIVE = 3;
  ITEM_EXPIRED = 4;
}

message Projectile {
  optional uint64 damage = 1;
  optional uint64 owner_id = 2;
  ProjectileStatus status = 3;
  optional string skill_key = 4;
}

enum ProjectileStatus {
  PROJECTILE_STATUS_UNDEFINED = 0;
  ACTIVE = 1;
  EXPLODED = 2;
  CONSUMED = 3;
}

message Obstacle {
  optional string color = 1;
  optional bool collisionable = 2;
  optional string status = 3;
  optional string type = 4;
}

message PowerUp {
  uint64 owner_id = 1;
  PowerUpstatus status = 2;
}

message Crate {
  optional uint64 health = 1;
  optional uint64 amount_of_power_ups = 2;
  CrateStatus status = 3;
}

enum CrateStatus {
  CRATE_STATUS_UNDEFINED = 0;
  FINE = 1;
  DESTROYED = 2;
}

enum  PowerUpstatus {
  AVAILABLE = 0;
  TAKEN = 1;
  UNAVAILABLE = 2;
}

message Pool {
  uint64 owner_id = 1;
  PoolStatus status = 2;
  repeated Effect effects = 3;
  string skill_key = 4;
}

message Bush {
}

message Trap {
  uint64 owner_id = 1;
  string name = 2;
  TrapStatus status = 3;
}

message PlayerAction {
  PlayerActionType action = 1;
  uint64 duration = 2;
  Position destination = 3;
  Position direction = 4;
}

enum PlayerActionType {
    MOVING = 0;
    STARTING_SKILL_1 = 1;
    STARTING_SKILL_2 = 2;
    EXECUTING_SKILL_1 = 3;
    EXECUTING_SKILL_2 = 4;
    EXECUTING_SKILL_3 = 5;
}

enum TrapStatus {
  PENDING = 0;
  PREPARED = 1;
  TRIGGERED = 2;
  USED = 3;
}

enum PoolStatus {
  WAITING = 0;
  READY = 1;
}

/*
 * Player Actions
 */
message Move {
  Direction direction = 1;
}

message Attack {
  string skill = 1;
  AttackParameters parameters = 2;
}

message AttackParameters {
  Direction target = 1;
}

message UseItem {
  uint64 item_position = 1;
}

message SelectBounty {
  string bounty_quest_id = 1;
}

message ToggleZone { }
message ToggleBots { }
message ChangeTickrate {
  int64 tickrate = 1;
}

message GameAction {
  oneof action_type {
    Move move = 1;
    Attack attack = 2;
    UseItem use_item = 4;
    SelectBounty select_bounty = 5;
    ToggleZone toggle_zone = 6;
    ToggleBots toggle_bots = 7;
    ChangeTickrate change_tickrate = 8;
  }
  int64 timestamp = 3;
}

message Zone {
  float radius = 1;
  bool enabled = 2;
  int64 next_zone_change_timestamp = 3;
  bool shrinking = 4;
}

message KillEntry {
  uint64 killer_id = 1;
  uint64 victim_id = 2;
}

message BountyInfo {
  string id = 1;
  string description = 2;
  string quest_type = 3;
  CurrencyReward reward = 4;
}

message CurrencyReward {
  string currency  = 1;
  int64 amount = 2;
}
